// Accuracy = 98.39
// Run time = 9 mins
// 0.01; 30; 0.9; 0.7; G


const {
// Input image size
ImgW = 28;
ImgH = 28;

// The convolutional layer parameters
C1Maps = 5;
C1KernW = 5;
C1KernH = 5;
C1StrideW = 2;
C1StrideH = 2;
// The following formula computes dimensions with padding enabled.
C1OutW = (ImgW - 1) / C1StrideW + 1;
C1OutH = (ImgH - 1) / C1StrideH + 1;

// The convolutional layer parameters
C2Maps = 10;
C2KernW = 5;
C2KernH = 5;
C2StrideW = 2;
C2StrideH = 2;
// The following formula computes dimensions with padding enabled.
C2OutW = (C1OutW - 1) / C2StrideW + 1;
C2OutH = (C1OutH - 1) / C2StrideH + 1;
// Since Z dimension of the kernel is 1 and sharing is disabled in Z dimension
// total number of maps is a product of input maps and layer maps.
C2OutZ = C2Maps * C1Maps;

// The pooling layer parameters
P1KernW = 2;
P1KernH = 2;
P1StrideW = 2;
P1StrideH = 2;
// The following formula computes dimensions with no padding.
P1OutW = (C2OutW - P1KernW) / P1StrideW + 1;
P1OutH = (C2OutH - P1KernH) / P1StrideH + 1;

// The response normalization layer parameters
RN1KernW = 3;
RN1KernH = 3;
RN1StrideW = 1;
RN1StrideH = 1;
Alpha1 = 0.001;
Beta1 = 0.75;
// The following formula computes dimensions with no padding.
RN1OutW = (P1OutW - RN1KernW) / RN1StrideW + 1;
RN1OutH = (P1OutH - RN1KernH) / RN1StrideH + 1;
}

input Picture [ImgH, ImgW];

// The convolutional layer
hidden C1 [C1Maps, C1OutH, C1OutW]
  from Picture convolve {
    InputShape  = [ImgH, ImgW];
    KernelShape = [C1KernH, C1KernW];
    Stride      = [C1StrideH, C1StrideW];
    Padding     = [true, true];
    MapCount    = C1Maps;
  }

// The convolutional layer
hidden C2 [C2OutZ, C2OutH, C2OutW]
  from C1 convolve {
    InputShape  = [C1Maps, C1OutH, C1OutW];
    KernelShape = [1, C2KernH, C2KernW];
    Stride      = [1, C2StrideH, C2StrideW];
    Padding     = [false, true, true];
    MapCount    = C2Maps;
  }

// The max pooling layer
hidden P1 [C2OutZ, P1OutH, P1OutW]
  from C2 max pool {
    InputShape  = [C2OutZ, C2OutH, C2OutW];
    KernelShape = [1, P1KernH, P1KernW];
    Stride      = [1, P1StrideH, P1StrideW];
  }

// The response normalization layer
//hidden RN1 [C1Maps, RN1OutH, RN1OutW]
//  from P1 response norm {
//    InputShape  = [C1Maps, P1OutH, P1OutW];
//    KernelShape = [1, RN1KernH, RN1KernW];
//    Stride      = [1, RN1StrideH, RN1StrideW];
//    Alpha       = Alpha1;
//    Beta        = Beta1;
//  }

// A hidden layer with 100 nodes
hidden H1 [100]
  from P1 all;

// The output layer with 10 classes
output Result [10] softmax
  from H1 all;
